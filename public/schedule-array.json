[
  {
    "schedule_name" : "hubstaff:account",
    "query" : "SELECT id FROM hubstaff_activities ORDER BY starts_at",
    "description": "select all data from hubstaff_activity table and order them by starts_at"
  },
  {
    "schedule_name" : "hubstaff:account",
    "query" : "SELECT * from user_rates where id in (SELECT GROUP_CONCAT(id) as id FROM ( SELECT * FROM `user_rates` WHERE start_date < 'time') as a group by user_id)",
    "description": "select all data from user_rates where id in user_rates where start_date is less than time and group by user_id"
  },
  {
    "schedule_name" : "hubstaff:account",
    "query" : "SELECT * from hubstaff_activities where start_date >= `start` where start_date < `end`)",
    "description": "select all data from hubstaff_activities where start_date is grater than start where start_date is less than end"
  },
  {
    "schedule_name" : "AddBitsToMediaTable",
    "query" : "select * from `media` where `bits` is null and `directory` like `product` order by `id` asc",
    "description": "Select all data from media where bits is null and directery like product order by is asc"
  },
  {
    "schedule_name" : "AddGroupTheme",
    "query" : "update website_store_view SET ref_theme_group_id = null where ref_theme_group_id != null",
    "description": "Update ref_theme_group_id in website_store_view table where ref_theme_group_id not null"
  },
  {
    "schedule_name" : "AddRoutesToGroups",
    "query" : "select * from `group_routes`",
    "description": "Select all data in group_routes table"
  },
  {
    "schedule_name" : "AddRoutesToGroups",
    "query" : "delete  from  group_routes WHERE route_id=route_id",
    "description": "delete route id in group_routes where route_id=route_id"
  },
  {
    "schedule_name" : "AddRoutesToGroups",
    "query" : "update group_routes set group_id=group_id, route_id=route_id, route_name =route_name,domain=domain, url= url  where group_id=group_id ",
    "description": "Update group_id=group_id, route_id=route_id, route_name =route_name,domain=domain, url= url  in group_routes table where group id =group id "
  },
  {
    "schedule_name" : "AddRoutesToGroups",
    "query" : "insert INTO group_routes (group_id, route_id, route_name, domain, url) values (value1, route_id, route_name,domain,url )",
    "description": "insert the all data in group_routes table"
  },
  {
    "schedule_name" : "ChangeTesterBasedOnTeamLead",
    "query" : "update `developer_tasks` set `tester_id` = 414  where `team_lead_ide` = 319",
    "description": "Update tester_id = 414 in developer_tasks table where team_lead_ide=319"
  },
  {
    "schedule_name" : "CheckScrapersLog",
    "query" : "select * from `scrapers` where `scraper_name` = name",
    "description": "Select all data in scrapers table where scraper_name = name"
  },
  {
    "schedule_name" : "CheckScrapersLog",
    "query" : "select * from `users` where `id` = ?",
    "description": "Select all data in users table where id = id"
  },
  {
    "schedule_name" : "ConnectGoogleClientAccounts",
    "query" : "select * from `google_client_account_mails` ",
    "description": "Select att data in google_client_account_mails table order "
  },
  {
    "schedule_name" : "ConnectGoogleClientAccounts",
    "query" : "select * from `users`",
    "description": "Select all data in user table"
  },
  {
    "schedule_name" : "ConnectGoogleClientAccounts",
    "query" : "GoogleClientAccount::find($acc->google_client_account_id)",
    "description": ""
  },
  {
    "schedule_name" : "ConnectGoogleClientAccounts",
    "query" : "insert into google_client_notification (google_client_id, receiver_id, message, notification_type) values (id, id, msg, error)",
    "description": "Insert the google_client_id, receiver_id, message, notification_type field in google_client_notification"
  },
  {
    "schedule_name" : "GT-metrix-account-credit-limit",
    "query" : "select * from store_gt_metrix_account",
    "description": "select all data in store_gt_metrix_account"
  },
  {
    "schedule_name" : "GT-metrix-account-credit-limit",
    "query" : "update store_gt_metrix_account status=active where account_id= account_id",
    "description": "update status field in store_gt_metrix_account where account_id= account_id "
  },
  {
    "schedule_name" : "GT-metrix-account-credit-limit",
    "query" : "update store_gt_metrix_account status=inactive where account_id= account_id",
    "description": "update status field in store_gt_metrix_account where account_id= account_id"
  },
  {
    "schedule_name" : "hubstaff:account",
    "query" : "select * from hubstaff_activities order by starts_at",
    "description": "select all data in hubstaff_activities table order by starts_at"
  },
  {
    "schedule_name" : "hubstaff:account",
    "query" : "select * from `user_rates` where `start_date` >= ? and `start_date` < ?",
    "description": "select all data in user_rates table where start_date is grater than start where start_date is less than end"
  },
  {
    "schedule_name" : "hubstaff:account",
    "query" : "select `hubstaff_activities`.*, `hubstaff_members`.`user_id` as `system_user_id` from `hubstaff_activities` left join `hubstaff_members` on `hubstaff_members`.`hubstaff_user_id` = `hubstaff_activities`.`user_id` where `starts_at` >= ? and `starts_at` < ?",
    "description": ""
  },
  {
    "schedule_name" : "hubstaff:account",
    "query" : "select * from `users` where 0 = 1 and `users`.`deleted_at` is null",
    "description": "select all data in users deleted_at in not null"
  },
  {
    "schedule_name" : "hubstaff:account",
    "query" : "insert into hubstaff_payment_account (user_id, accounted_at, amount, hrs, billing_start, billing_end, rate,payment_currency, total_payout, ex_rate) values (user_id, accounted_at, amount, hrs, billing_start, billing_end, rate,payment_currency, total_payout, 68)",
    "description": "insert the record in hubstaff_payment_account"
  },
  {
    "schedule_name" : "hubstaff:account",
    "query" : "update hubstaff_activity hubstaff_payment_account_id=id  where id= account_id",
    "description": "update in hubstaff_activity table where  id= account_id in hubstaff_payment_account_id equal to id"
  },
  {
    "schedule_name" : "hubstaff:account",
    "query" : "select * from developer_task where hubstaff_task_id=task id",
    "description": "select all data in developer_task table where hubstaff_task_id=task id"
  },
  {
    "schedule_name" : "hubstaff:account",
    "query" : "update developer_task estimate_minutes=estimate_minutes where id= id",
    "description": "Update estimate_minutes field in developer_task table where developer_task id =id  "
  },
  {
    "schedule_name" : "database:historical-data",
    "query" : "SELECT table_schema as db_name,Round(Sum(data_length + index_length) / 1024 / 1024, 1) as db_size FROM information_schema.tables  where table_schema = erp GROUP  BY table_schema",
    "description": ""
  },
  {
    "schedule_name" : "database:historical-data",
    "query" : "select * from `database_historical_records` where `database_name` = ? order by `created_at` desc",
    "description": "select all data in database_historical_records table where `database_name` = ? order by `created_at` desc"
  },
  {
    "schedule_name" : "database:historical-data",
    "query" : "insert into database_historical_record (database_name,size) values (db_name, db_size)",
    "description": "insert the database_name and size record in database_historical_record "
  },
  {
    "schedule_name" : "database:historical-data",
    "query" : "select TABLE_NAME as db_table_name, Round(Sum(data_length + index_length) / 1024, 1) as db_size FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = BASE TABLE AND TABLE_SCHEMA='db_name.' GROUP  BY TABLE_NAME",
    "description": ""
  },
  {
    "schedule_name" : "database:historical-data",
    "query" : "select * from `database_table_historical_records` where `database_name` = name and `database_id` = id order by `created_at` asc",
    "description": "select all data in database_table_historical_records table where `database_name` = name and `database_id` = id order by `created_at` asc"
  },
  {
    "schedule_name" : "database:historical-data",
    "query" : "insert into chat_message (message,erp_user, user_id, approved, status, message_application_id) values (message, user_id,user_id, 1 ,2 , 10001)",
    "description": "insert the message,erp_user, user_id, approved, status and message_application_id record chat_message table"
  },
  {
    "schedule_name" : "database:historical-data",
    "query" : "insert into database_table_historical_record (database_name,size, database_id) values (db_name, db_size, id)",
    "description": "insert the database_name,siz and database_id record in database_table_historical_record "
  },
  {
    "schedule_name" : "database:table-historical-data",
    "query" : "SELECT TABLE_NAME as db_name, Round(Sum(data_length + index_length) / 1024, 1) as db_size FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = BASE TABLE AND TABLE_SCHEMA=erp GROUP  BY TABLE_NAME",
    "description": ""
  },
  {
    "schedule_name" : "database:table-historical-data",
    "query" : "select * from `database_historical_records` where `database_name` = ? order by `created_at` desc",
    "description": "select all data in database_historical_records table where `database_name` = ? order by `created_at` desc "
  },
  {
    "schedule_name" : "database:table-historical-data",
    "query" : "insert into database_table_historical_record (database_name,size, database_id) values (db_name, db_size, id)",
    "description": "insert the database_name,size and database_id field in database_table_historical_record table"
  },
  {
    "schedule_name" : "AddGroupTheme",
    "query" : "update `website_store_views` set `ref_theme_group_id` = ?, `website_store_views`.`updated_at` = 2023-03-24 15:36:23 where `ref_theme_group_idww` is not null",
    "description": " "
  },
  {
    "schedule_name" : "AddGroupTheme",
    "query" : "update website_store_view ref_theme_group_id=ref_group_id where store_group_id= ref_group_id",
    "description": "update ref_theme_group_id field in website_store_view table where store_group_id= ref_group_id"
  },
  {
    "schedule_name" : "hashtags:update-counts",
    "query" : "select * from `hash_tags` order by `post_count` asc",
    "description": "selected all data in hash_tags  order by post_count asc"
  },
  {
    "schedule_name" : "rename:brandLogo",
    "query" : "select * from `brand_logos` where `logo_image_name` = 'image name'",
    "description": "selected all data from  brand_logos where `logo_image_name` = 'image name'"
  },
  {
    "schedule_name" : "rename:brandLogo",
    "query" : "insert into brand_logo (logo_image_namess,size, user_id) values (logo_image_namess, db_size, user id)",
    "description": "insert the logo_image_namess,size and user_id from brand_logo table "
  },
  {
    "schedule_name" : "AddRoutesToGroups",
    "query" : "select * from `group_routes`",
    "description": "selected all data from  group_routes"
  },
  {
    "schedule_name" : "AddRoutesToGroups",
    "query" : "delete  from  group_routes WHERE route_id=route_id",
    "description": "delete record from group_routes table where route_id=route_id "
  },
  {
    "schedule_name" : "AddRoutesToGroups",
    "query" : "update group_routes set group_id=group_id, route_id=route_id, route_name =route_name,domain=domain, url= url where group_id=group_id ",
    "description": "update record in group_id ,route_id, route_name, domain, url in group_routes table where group_id=group_id "
  },
  {
    "schedule_name" : "addUserPaymentData",
    "query" : "select `developer_tasks`.* from `developer_tasks` left join `payment_receipts` on `payment_receipts`.`developer_task_id` = `developer_tasks`.`id` and `payment_receipts`.`status` = ? where `is_resolved` = ? and `payment_receipts`.`developer_task_id` is null and `developer_tasks`.`deleted_at` is null group by `developer_tasks`.`id`",
    "description": ""
  },
  {
    "schedule_name" : "addUserPaymentData",
    "query" : "insert into payment_receipt (status,rate_estimated, date, currency, user_id, by_command, developer_task_id) values (Pending, rate_estimated, date, '', id, 1,id)",
    "description": ""
  },
  {
    "schedule_name" : "addUserPaymentData",
    "query" : "select `tasks`.* from `tasks` left join `payment_receipts` on `payment_receipts`.`task_id` = `tasks`.`id` and `payment_receipts`.`status` = ? where `tasks`.`status` = ? and `payment_receipts`.`task_id` is null and `tasks`.`deleted_at` is null group by `tasks`.`id`",
    "description": ""
  },
  {
    "schedule_name" : "addUserPaymentData",
    "query" : "select * from user where task=assign_to",
    "description": "select all data in user table where task equal to assign_to"
  },
  {
    "schedule_name" : "addUserPaymentData",
    "query" : "update payment_receipt status=Pending, rate_estimated=rate_estimated, date=date, currency='', user_id=task_user_id, by_command=1, task_id= task_id  where  task_id=id and  user_id=user_id",
    "description": "Update status, rate_estimated, date, currency, user_id, by_command, task_id field in payment_receipt table where  task_id=id and  user_id=user_id"
  },
  {
    "schedule_name" : "addUserPaymentData",
    "query" : "insert into payment_receipt (status,rate_estimated, date, currency,by_command,task_id) values ('Pending', rate_estimated, date, '', task user id, 1, id)",
    "description": "insert status,rate_estimated, date, currency,by_command and task_id record in payment_receipt table"
  },
  {
    "schedule_name" : "addWebsiteLangGroup",
    "query" : "select * from `website_store_views` where `store_group_id` is null",
    "description": "select all record in website_store_views  table  where `store_group_id` is null"
  },
  {
    "schedule_name" : "addWebsiteLangGroup",
    "query" : "select * from `website_store_views` where `id` = id",
    "description": "select all record in website_store_views  table  where id equal id"
  },
  {
    "schedule_name" : "addWebsiteLangGroup",
    "query" : "update website_store_view store_group_id=response id where id= id",
    "description": "Update store_group_id field in website_store_view table where id equal id "
  },
  {
    "schedule_name" : "addWebsiteLangGroup",
    "query" : "select * from `website_store_views` where `store_group_id` is id",
    "description": "select all record in website_store_view  table  where store_group_id equal id"
  },
  {
    "schedule_name" : "addWebsiteLangGroup",
    "query" : "select * from `website_store_views` where `name` = name and `code` = code",
    "description": "select all record in website_store_view  table  where  name equal name and code equal code"
  },
  {
    "schedule_name" : "addWebsiteLangGroup",
    "query" : "update website_store_view store_group_id=store_group_id. where id= id",
    "description": "Update store_group_id field in website_store_view table where id equal id"
  },
  {
    "schedule_name" : "ai:run",
    "query" : "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name" : "ai:run",
    "query" : " insert into `cron_job_erro_logs` (`signature`, `priority`, `error`, `error_count`, `status`, `module`, `subject`, `assigned_to`, `updated_at`, `created_at`) values (ai:run, 1, Method Plank\\Mediable\\MediableCollection::toSql does not exist., 1, Planned, Cron, URGENT-CRON-ISSUE-AI:RUN, 53, 2023-03-24 17:05:06, 2023-03-24 17:05:06)",
    "description": "insert all field in cron_job_erro_logs table  "
  },
  {
    "schedule_name" : "ai:run",
    "query" : "select * from `log_scraper_vs_ai` where (`product_id` = ?)",
    "description": "select all record in log_scraper_vs_ai table where product_id equal id"
  },
  {
    "schedule_name" : "ai:run",
    "query" : "select * from `products` where `id` = ? and `products`.`deleted_at` is null",
    "description": "Select all record in products table where id equal id"
  },
  {
    "schedule_name" : "ai:run",
    "query" : "insert into log_scraper_vs_ai (product_id, ai_name,media_input, result_scraper, result_ai) values (id,'Google Vision', media_input, result_scraper, result_ai)",
    "description": "insert  product_id, ai_name,media_input, result_scraper and result_ai field in log_scraper_vs_ai table"
  },
  {
    "schedule_name" : "logs:analyze",
    "query" : "select `id`, `user_id` from `github_users` where `id` in [Id array]",
    "description": "select id and user id in github_users table where id in same ids"
  },
  {
    "schedule_name" : "logs:analyze",
    "query" : "insert into issue (user_id, issue, priority, module, subject) values (user_id, issue, 0,'', subject)",
    "description": "insert the user_id, issue, priority, module and subject field in  issue table"
  },
  {
    "schedule_name" : "assetsmanagerduedate:pay",
    "query" : "select * from `assets_manager` where date(`due_date`) = ?",
    "description": "select all data in assets_manager table where due_date equal due_date"
  },
  {
    "schedule_name" : "assetsmanagerduedate:pay",
    "query" : "select * from `cash_flows` where `date` = ? and `cash_flow_able_id` = ? and `cash_flow_able_type` = ? and `type` = ?",
    "description": "select all data in cash_flows table where date equal dat and cash_flow_able_id equal id  cash_flow_able_type = cash_flow_able_type and type = type "
  },
  {
    "schedule_name" : "assetsmanagerduedate:pay",
    "query" : "insert into cash_flow (description, date, amount, expected, actual,currency, type,  cash_flow_able_id, cash_flow_category_id, cash_flow_able_type) values (description, date, amount, expected, actual,currency,'pending', cash_flow_able_id, cash_flow_category_id, cash_flow_able_type)",
    "description": "insert description, date, amount, expected, actual,currency, type,  cash_flow_able_id, cash_flow_category_id and cash_flow_able_type field in cash_flow table"
  },
  {
    "schedule_name" : "assetsmanagerpayment:cron Weekly",
    "query" : "select * from `assets_manager` where `payment_cycle` = Weekly and (date(`due_date`) = due_date or `due_date` ='' or `due_date` is null)",
    "description": "select all data in assets_manager table where payment_cycle equal Weekly and due_date = due_date or due_date ='' or due_date is null"
  },
  {
    "schedule_name" : "assetsmanagerpayment:cron Daily",
    "query" : "select * from `assets_manager` where `payment_cycle` = Daily and (date(`due_date`) = due_date or `due_date` ='' or `due_date` is null)",
    "description": "select all data in assets_manager table where payment_cycle equal Daily and due_date = due_date or due_date ='' or due_date is null"
  },
  {
    "schedule_name" : "assetsmanagerpayment:cron Monthly",
    "query" : "select * from `assets_manager` where `payment_cycle` = Monthly and (date(`due_date`) = due_date or `due_date` ='' or `due_date` is null)",
    "description": "select all data in assets_manager table where payment_cycle equal Monthly and due_date = due_date or due_date ='' or due_date is null"
  },
  {
    "schedule_name" : "assetsmanagerpayment:cron Bi-Weekly",
    "query" : "select * from `assets_manager` where `payment_cycle` = Bi-Weekly and (date(`due_date`) = due_date or `due_date` ='' or `due_date` is null)",
    "description": "select all data in assets_manager table where payment_cycle equal Bi-Weekly and due_date = due_date or due_date ='' or due_date is null"
  },
  {
    "schedule_name" : "assetsmanagerpayment:cron Yearly",
    "query" : "select * from `assets_manager` where `payment_cycle` = Yearly and (date(`due_date`) = due_date or `due_date` ='' or `due_date` is null)",
    "description": "select all data in assets_manager table where payment_cycle equal Yearly and due_date = due_date or due_date ='' or due_date is null"
  },
  {
    "schedule_name" : "assetsmanagerpayment:cron Weekly",
    "query" : "insert into cash_flow (description, date, amount, expected, actual,currency, type,  cash_flow_able_id, cash_flow_category_id, cash_flow_able_type) values (description, date, amount, expected, actual,currency,'pending', cash_flow_able_id, cash_flow_category_id, cash_flow_able_type)",
    "description": "insert description, date, amount, expected, actual,currency, type,  cash_flow_able_id, cash_flow_category_id and cash_flow_able_type field in cash_flow table"
  },
  {
    "schedule_name" : "assetsmanagerpayment:cron Daily",
    "query" : "update `assets_manager` set `due_date` = 2023-03-27, `assets_manager`.`updated_at` = 2023-03-24 17:31:46 where `id` = 1",
    "description": "Update due_date field in assets_manager table where id equal 1 "
  },
  {
    "schedule_name" : "assetsmanagerpayment:cron Monthly",
    "query" : "update `assets_manager` set `due_date` = 2023-03-27, `assets_manager`.`updated_at` = 2023-03-24 17:31:46 where `id` = 1",
    "description": "Update due_date field in assets_manager table where id equal 1 "
  },
  {
    "schedule_name" : "assetsmanagerpayment:cron Bi-Weekly",
    "query" : "update `assets_manager` set `due_date` = 2023-03-27, `assets_manager`.`updated_at` = 2023-03-24 17:31:46 where `id` = 1",
    "description": "Update due_date field in assets_manager table where id equal 1 "
  },
  {
    "schedule_name" : "assetsmanagerpayment:cron Yearly",
    "query" : "update `assets_manager` set `due_date` = 2023-03-27, `assets_manager`.`updated_at` = 2023-03-24 17:31:46 where `id` = 1",
    "description": "Update due_date field in assets_manager table where id equal 1 "
  },
  {
    "schedule_name" : "command:assign_incomplete_products",
    "query" : "select * from `scraped_products` where (`cron_executed` = ?)",
    "description": "select all data in scraped_products table where cron_executed equal cron_executed"
  },
  {
    "schedule_name" : "command:assign_incomplete_products",
    "query" : "update `scraped_products` set `cron_executed` = 1 whereIn `id` = [id array]",
    "description": "Update  cron_executed field in scraped_products table where in id equal all id array "
  },
  {
    "schedule_name" : "command:assign_incomplete_products",
    "query" : "update `scraped_products` set `cron_executed` = 1 whereIn `id` = [id array]",
    "description": "Update  cron_executed field in scraped_products table where in id equal all id array "
  },
  {
    "schedule_name" : "assign-scrap-process",
    "query" : "select * from `scrapers` where `scraper_name` = ''",
    "description": "select all data in scrapers table where scraper_name equal scraper_name"
  },
  {
    "schedule_name" : "assign-scrap-process",
    "query" : "insert into scraper_process (scraper_id, scraper_name, server_id,started_at, ended_at) values (scraper_id, scraper_name, server_id,started_at, ended_at)",
    "description": "insert scraper_id, scraper_name, server_id,started_at and ended_at field in scraper_process table"
  },
  {
    "schedule_name" : "approve:products",
    "query" : "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and  start_time field in cron_job_report table"
  },
  {
    "schedule_name" : "approve:products",
    "query" : "select * from `products` where `is_approved` = ? and `is_listing_rejected` = ? and `is_crop_approved` = ? and `is_crop_ordered` = ? and `products`.`deleted_at` is null order by RAND()",
    "description": "select all data in products table where is_approved and is_listing_rejected and is_crop_ordered and is_crop_ordered and deleted_at in not null order by RAND"
  },
  {
    "schedule_name" : "approve:products",
    "query" : "insert into listing_history (user_id, product_id, action, content ) values (109, id,'LISTING_APPROVAL', ['action' => 'LISTING_APPROVAL', 'message' => 'Listing approved by ERP!'])",
    "description": "insert the user_id, product_id, action and content field in  listing_history"
  },
  {
    "schedule_name" : "approve:products",
    "query" : "update `product` set `is_approved` = 1, is_listing_rejected=0, approved_by=109, listing_approved_at= date whereIn `id` = [id array]",
    "description": "Update the is_approved, is_listing_rejected, approved_by and listing_approved_at  field in product table"
  },
  {
    "schedule_name" : "approve:products",
    "query" : "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name" : "instagram:auto-comment-hashtags",
    "query" : "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name" : "instagram:auto-comment-hashtags",
    "query" : "select * from `auto_reply_hashtags` where `status` = 1",
    "description": "select all data in auto_reply_hashtags table where status equal 1 "
  },
  {
    "schedule_name" : "instagram:auto-comment-hashtags",
    "query" : "select * from `auto_comment_histories` where `status` = ? limit 50",
    "description": "select all data in auto_reply_hashtags table where status equal 1 limit 50"
  },
  {
    "schedule_name" : "instagram:auto-comment-hashtags",
    "query" : "select * from `accounts` where `platform` = ? and `bulk_comment` = ? and `accounts`.`deleted_at` is null",
    "description": "select all data in accounts table where platform equal platform and bulk_comment equal bulk_comment and deleted_at in null "
  },
  {
    "schedule_name" : "instagram:auto-comment-hashtags",
    "query" : "update `auto_comment_histories` set `status` = 0, account_id=1, comment='comment' where `id` = id",
    "description": "update status, account_id and comment field in auto_comment_histories table where id equal id  "
  },
  {
    "schedule_name" : "send:image-interest",
    "query" : "select * from `customers` where exists (select * from `erp_leads` where `customers`.`id` = `erp_leads`.`customer_id` and (`multi_brand` is not null or `multi_category` is not null) order by `created_at` desc) and `customers`.`deleted_at` is null",
    "description": ""
  },
  {
    "schedule_name" : "send:image-interest",
    "query" : "select * from `customers` where exists (select * from `orders` where `customers`.`id` = `orders`.`customer_id` and exists (select * from `order_products` where `orders`.`id` = `order_products`.`order_id` and exists (select * from `products` where `order_products`.`product_id` = `products`.`id` and (`brand` is not null or `category` != ?) and `products`.`deleted_at` is null order by `created_at` desc)) and `orders`.`deleted_at` is null) and `customers`.`deleted_at` is null",
    "description": ""
  },
  {
    "schedule_name" : "send:image-interest",
    "query" : "insert into chat_message (customer_id) values (id)",
    "description": "insert customer_id field value in chat_message"
  },
  {
    "schedule_name" : "send:auto-messenger",
    "query" : "select * from `communication_histories` where `type` = ? and `model_type` = ? and `method` = ?",
    "description": "select all data in communication_histories table where type equal type and model_type equal model_type and method equal method "
  },
  {
    "schedule_name" : "send:auto-messenger",
    "query" : "select * from `auto_replies` where `type` = 'auto-reply' and `keyword` = 'order-refund-alternative'",
    "description": "select all data in auto_replies table where type = auto-reply and keyword = order-refund-alternative"
  },
  {
    "schedule_name" : "send:auto-messenger",
    "query" : "insert into chat_message (customer_id, message) values (id, message)",
    "description": "insert customer_id and message field value in chat_message"
  },
  {
    "schedule_name" : "send:auto-messenger",
    "query" : "select * from `orders` where `refund_answer` = 'no' and `orders`.`deleted_at` is null",
    "description": "select all data in orders table where refund_answer equal no and deleted_at is null "
  },
  {
    "schedule_name" : "send:auto-messenger",
    "query" : "select * from `private_views` where `status` is null",
    "description": "select all data in private_views table where status is null "
  },
  {
    "schedule_name" : "send:auto-messenger",
    "query" : "insert into chat_message (number, user_id, erp_user, task_id,contact_id, approved, status, message,is_reminder) values (null, user_id, erp_user, task_id, contact_id, 0, 1, message,1)",
    "description": "insert the number, user_id, erp_user, task_id,contact_id, approved, status, message and is_reminder field value in chat_message table"
  },
  {
    "schedule_name" : "product:reject-if-attribute-is-missing",
    "query" : "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time field value in cron_job_report table"
  },
  {
    "schedule_name" : "send:auto-reminder",
    "query" : "select * from `customers` where exists (select * from `orders` where `customers`.`id` = `orders`.`customer_id` and `order_status_id` = ? and `auto_messaged` = ? and `orders`.`deleted_at` is null order by `created_at` desc) and `customers`.`deleted_at` is null",
    "description": ""
  },
  {
    "schedule_name" : "send:auto-reminder",
    "query" : "insert into chat_message (customer_id, message) values (id,'Reminder about COD after 24 hours')",
    "description": "insert customer_id and message field value in chat_message table"
  },
  {
    "schedule_name" : "send:auto-reminder",
    "query" : "insert into chat_message (customer_id, message) values (id,'Please also note that since your order was placed on c o d - an initial advance needs to be paid to process the order - pls let us know how you would like to make this payment.')",
    "description": "insert customer_id and message field value in chat_message table"
  },
  {
    "schedule_name" : "send:auto-reminder",
    "query" : "select * from `chat_messages` where `customer_id` = 1 and `created_at` between ? and ? order by `created_at` desc",
    "description": "select all data in chat_messages table where customer_id = 1 and created_at between ? and ? order by created_at desc"
  },
  {
    "schedule_name" : "send:auto-reminder",
    "query" : "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field in cron_job_report table where id equal id"
  },
  {
    "schedule_name" : "brand:merge",
    "query" : "select * from brand",
    "description": "select all data in brand table "
  },
  {
    "schedule_name" : "brand:merge",
    "query" : "select * from `brands` where `brands`.`deleted_at` is null",
    "description": "select all data in brand table where deleted_at is null"
  },
  {
    "schedule_name" : "brand:merge",
    "query" : "update `brand` set `references` = references where id=id",
    "description": "update references field value in brand table where id equal id"
  },
  {
    "schedule_name" : "brand:merge",
    "query" : "select * from product where brand=keyId",
    "description": "select all data in product where brand equal brand"
  },
  {
    "schedule_name" : "brand:merge",
    "query" : "update `product` set `brand` = references,`last_brand`= last_brand  where id=id",
    "description": "update the brand and last_brand field value in product table where id equal id"
  },
  {
    "schedule_name" : "brand:merge-delete",
    "query" : "select * from brand ",
    "description": "select all data in brand table"
  },
  {
    "schedule_name" : "brand:merge-delete",
    "query" : "select * from brand where id >  brand id and whereNull(deleted_at)",
    "description": "select all data in brand table where id > brand and null delete at"
  },
  {
    "schedule_name" : "brand:maxminprice",
    "query" : "select * from `brands` where (`min_sale_price` is null or `min_sale_price` <= 0) and `brands`.`deleted_at` is null",
    "description": "select all data in brand table where (`min_sale_price` is null or `min_sale_price` <= 0) and `brands`.`deleted_at` is null"
  },
  {
    "schedule_name" : "find:bruno-russo-composition",
    "query" : "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name" : "find:bruno-russo-composition",
    "query" : "select * from product where supplier = 'BRUNA ROSSO'",
    "description": "select all data in product table where supplier equal 'BRUNA ROSSO' "
  },
  {
    "schedule_name" : "find:bruno-russo-composition",
    "query" : "update `cron_job_report` set `end_time` = time where id=id",
    "description": "update end_time field value in cron_job_report table"
  },
  {
    "schedule_name" : "command:updatBuildStatus",
    "query" : "select * from build_process_histories",
    "description": "select all data in build_process_histories table"
  },
  {
    "schedule_name" : "cache:master-control",
    "query" : "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and start_time filed in cron_job_report table"
  },
  {
    "schedule_name" : "cache:master-control",
    "query" : "select count(*) as aggregate from `products` where `status_id` = 4 and `stock` >= 1 and `products`.`deleted_at` is null",
    "description": "count all data in products table where status_id = 4 and stock >= 1 and deleted_at is null"
  },
  {
    "schedule_name" : "cache:master-control",
    "query" : "select count(*) as aggregate from `cropped_image_references` where `created_atsss` >= 2023-03-20 00:00:00",
    "description": ""
  },
  {
    "schedule_name" : "cache:master-control",
    "query" : "select * from `cron_jobs` inner join `cron_job_reports` as `cjr` on `cron_jobs`.`signature` = `cjr`.`signature` where `cjr`.`start_time` > NOW() - INTERVAL 24 HOUR and `cron_jobs`.`last_status` = ? group by `cron_jobs`.`signature`",
    "description": ""
  },
  {
    "schedule_name" : "cache:master-control",
    "query" : "select * from `cropped_image_references` where date(`created_at`) = ?",
    "description": ""
  },
  {
    "schedule_name" : "cache:master-control",
    "query" : "select * from `products` where `status_id` = ? and `stock` >= ? and `products`.`deleted_at` is null",
    "description": ""
  },
  {
    "schedule_name" : "cache:master-control",
    "query" : "SELECT COUNT(DISTINCT(sp.sku)) as ttl FROM suppliers s JOIN scrapers sc ON s.id=sc.supplier_id JOIN scraped_products sp ON sp.website=sc.scraper_name WHERE s.supplier_status_id=1 AND sp.validated=1 AND sp.website!='internal_scraper' ANDsp.last_inventory_at > DATE_SUB(NOW(), INTERVAL sc.inventory_lifetime DAY)",
    "description": ""
  },
  {
    "schedule_name" : "cache:master-control",
    "query" : "SELECT users.name, developer_tasks.subject, developer_tasks.id as devtaskId,tasks.id as task_id,tasks.task_subject as task_subject,  hubstaff_activities.starts_at, SUM(tracked) as day_tracked FROM `users` JOIN hubstaff_members ON hubstaff_members.user_id=users.id JOIN hubstaff_activities ON hubstaff_members.hubstaff_user_id=hubstaff_activities.user_id LEFT JOIN developer_tasks ON hubstaff_activities.task_id=developer_tasks.hubstaff_task_id LEFT JOIN tasks ON hubstaff_activities.task_id=tasks.hubstaff_task_id WHERE ( (`hubstaff_activities`.`starts_at` LIKE '.$date.') AND (developer_tasks.id is NOT NULL or tasks.id is not null) and hubstaff_activities.task_id > 0)  GROUP by hubstaff_activities.task_id  order by day_tracked desc '",
    "description": ""
  },
  {
    "schedule_name" : "cache:master-control",
    "query" : "select * from reply_category",
    "description": "select all data in reply_category table"
  },
  {
    "schedule_name" : "cache:master-control",
    "query" : "select * from `replies` where `model` = 'Vendor' and `deleted_at` is null and `replies`.`deleted_at` is null",
    "description": ""
  },
  {
    "schedule_name" : "cache:master-control",
    "query" : "select * from `replies` where `model` = 'Supplier' and `deleted_at` is null and `replies`.`deleted_at` is null",
    "description": ""
  },
  {
    "schedule_name" : "cache:master-control",
    "query" : "select * from scrap_remarks as sr join ( select max(id) as id from scrap_remarks group by scraper_name) as max_s on sr.id =  max_s.id order by created_at desc",
    "description": ""
  },
  {
    "schedule_name" : "cache:master-control",
    "query" : "SELECT users.name, developer_tasks.subject, developer_tasks.id as devtaskId,tasks.id as task_id,tasks.task_subject as task_subject,  hubstaff_activities.starts_at, SUM(tracked) as day_tracked  FROM `users`  JOIN hubstaff_members ON hubstaff_members.user_id=users.id  JOIN hubstaff_activities ON hubstaff_members.hubstaff_user_id=hubstaff_activities.user_id  LEFT JOIN developer_tasks ON hubstaff_activities.task_id=developer_tasks.hubstaff_task_id  LEFT JOIN tasks ON hubstaff_activities.task_id=tasks.hubstaff_task_id  WHERE ( (`hubstaff_activities`.`starts_at` LIKE '.$date.') AND (developer_tasks.id is NOT NULL or tasks.id is not null) and hubstaff_activities.task_id > 0) GROUP by hubstaff_activities.task_id order by day_tracked desc ",
    "description": ""
  },
  {
    "schedule_name" : "cache:master-control",
    "query" : "select `hubstaff_activity_notifications`.*, `u`.`name` as `user_name`, `av`.`minute` as `daily_working_hour` from `hubstaff_activity_notifications` inner join `users` as `u` on `hubstaff_activity_notifications`.`user_id` = `u`.`id` left join `user_avaibilities` as `av` on `hubstaff_activity_notifications`.`user_id` = `av`.`user_id` where `av`.`is_latest` = 1 and date(`start_date`) = ?",
    "description": ""
  },
  {
    "schedule_name" : "cache:master-control",
    "query" : "select `hubstaff_activity_notifications`.*, `u`.`name` as `user_name`, `av`.`minute` as `daily_working_hour` from `hubstaff_activity_notifications` inner join `users` as `u` on `hubstaff_activity_notifications`.`user_id` = `u`.`id` left join `user_avaibilities` as `av` on `hubstaff_activity_notifications`.`user_id` = `av`.`user_id` where `av`.`is_latest` = 1 and date(`start_date`) = ?",
    "description": ""
  },
  {
    "schedule_name" : "cashflow:overdue",
    "query" : "select * from `cash_flows` where `type` = 'pending' and date(`date`) = ?",
    "description": "select all data in cash_flows table where type equal 'pending' and date equal today"
  },
  {
    "schedule_name" : "cashflow:overdue",
    "query" : "select * from `cash_flows` where `cash_flow_able_id` = ? and `cash_flow_able_type` = ? and (`type` = ? or `type` = ?)",
    "description": "select all data in cash_flows table where type equal type and cash_flow_able_id equal cash_flow_able_id and cash_flow_able_type equal cash_flow_able_type and type equal type"
  },
  {
    "schedule_name" : "cashflow:overdue",
    "query" : "select * from `cash_flows` where `cash_flow_able_id` = ? and `cash_flow_able_type` = ? and (`type` = paid or `type` = received)",
    "description": "select all data in cash_flows table where type equal type and cash_flow_able_id equal cash_flow_able_id and cash_flow_able_type equal cash_flow_able_type and type equal 'received"
  },
  {
    "schedule_name" : "category:merge",
    "query" : "select * from category where parent_id != 0",
    "description": "select all data in category table where parent_id != 0 "
  },
  {
    "schedule_name" : "category:merge",
    "query" : "update category set references = '' where id=id",
    "description": "update references field in category where id equal id "
  },
  {
    "schedule_name" : "category:merge",
    "query" : "update category set references = matches id where id=id",
    "description": "update references field in category where id equal id "
  },
  {
    "schedule_name" : "category:missing-references",
    "query" : "insert into cron_job_report (signature, start_time) values (signature, date)",
    "description": "insert signature and  start_time field in cron_job_report table"
  },
  {
    "schedule_name" : "category:missing-references",
    "query" : "select `b`.`name` as `brand`, `website`, `category` from `scraped_products` inner join `brands` as `b` on `b`.`id` = `scraped_products`.`brand_id` where `category` is not null and `website` not in ('amrstore', 'antonia', 'baseblu', 'brunarosso', 'coltorti', 'doublef', 'giglio', 'griffo210', 'leam', 'les-market', 'lidiashopping', 'nugnes1920', 'savannahs', 'stilmoda', 'vinicio')",
    "description": ""
  },
  {
    "schedule_name" : "category:missing-references",
    "query" : "select * from category title = lastCategory",
    "description": ""
  },
  {
    "schedule_name" : "category:missing-references",
    "query" : "select * from `categories` where `references` LIKE ?",
    "description": "select all data in categories table where references like search data "
  },
  {
    "schedule_name" : "category:missing-references",
    "query" : "select * from `categories` where id = 143",
    "description": "select all data in categories tables where id equal id"
  },
  {
    "schedule_name" : "mapping:product-category",
    "query" : "select * from scrapped_category_mapping` where is_mapped = 0",
    "description": "select all data in scrapped_category_mapping table where is_mapped equal 0"
  },
  {
    "schedule_name" : "mapping:product-category",
    "query" : "select distinct `scraped_products`.`website`, `scraped_products`.`id` from `scraped_products` inner join `products` as `p` on `p`.`id` = `scraped_products`.`product_id` where `categories` = ? and `p`.`stock` > 0",
    "description": ""
  },
  {
    "schedule_name" : "mapping:product-category",
    "query" : "select * from `scrapped_product_category_mappings` where `category_mapping_id` = ? and `product_id` = ?",
    "description": "select all data in scrapped_product_category_mappings table where category_mapping_id equal category_mapping_id and product_id equal product_id"
  },
  {
    "schedule_name" : "mapping:product-category",
    "query" : "insert into scrapped_product_category_mapping (category_mapping_id, product_id) values (category_mapping_id, product_id)",
    "description": "insert category_mapping_id and product_id field in scrapped_product_category_mapping table"
  },
  {
    "schedule_name" : "mapping:product-category",
    "query" : "update scrapped_category_mapping is_mapped = 1 where id = id",
    "description": "update is_mapped field in scrapped_category_mapping table where  id equal id"
  },
  {
    "schedule_name" : "category-update:from-history",
    "query" : "select `product_id`, `category_id` from `product_category_histories` where `product_id` != ? group by `product_id` order by `created_at` desc",
    "description": "select product_id and category_id in product_category_histories table where product_id != 0 group by product_id order by created_at desc"
  },
  {
    "schedule_name" : "change:daily-learning-status",
    "query" : "select * from task_status where name = planned",
    "description": "select all data in task_status table where name = planned"
  },
  {
    "schedule_name" : "change:daily-learning-status",
    "query" : "update `learnings` set `status` = 1, `learnings`.`updated_at` = 2023-03-27 13:50:14 where date(completion_date)=date('2023-03-27') and `learnings`.`deleted_at` is null",
    "description": "update status and updated_at field in learnings where date(completion_date)=date('2023-03-27') and deleted_at is null "
  },
  {
    "schedule_name" : "change-color:erp",
    "query" : "select * from color_names_reference where color_code = 0",
    "description": "select all data in color_names_reference where where color_code equal 0 "
  },
  {
    "schedule_name" : "change-size:erp-wise",
    "query" : "select `products`.* from `products` inner join `product_suppliers` as `ps` on `ps`.`product_id` = `products`.`id` inner join `suppliers` as `s` on `s`.`id` = `ps`.`supplier_id` where `ps`.`supplier_id` in (?) and `products`.`size` != ? and `products`.`deleted_at` is null",
    "description": ""
  },
  {
    "schedule_name" : "change-size:erp-wise",
    "query" : "select * from `attribute_replacements` order by CHAR_LENGTH(first_term) desc",
    "description": "select all data in attribute_replacements table order by CHAR_LENGTH(first_term) desc"
  },{
  "schedule_name" : "change-size:erp-wise",
  "query" : "select * from system_size_manager table  group by category_id",
  "description": "select all data in system_size_manager table order by category_id"
},{
  "schedule_name" : "ChangeTesterBasedOnTeamLead",
  "query" : "update developer_task set tester_id=414 where team_lead_id=319 ",
  "description": "update tester_id field in developer_task where team_lead_id equal 319"
},{
  "schedule_name" : "email:copy-from-chat-message",
  "query" : "SELECT DISTINCT REGEXP_SUBSTR(`message`, '([a-zA-Z0-9._%+\\-]+)@([a-zA-Z0-9.-]+)\\.([a-zA-Z]{2,4})') AS Email,customer_id FROM `chat_messages` where customer_id >0  having Email is not null and Email != ''",
  "description": ""
},{
  "schedule_name" : "email:copy-from-chat-message",
  "query" : "select * from category where id = id",
  "description": "select all data in category table where id equal id"
},{
  "schedule_name" : "email:copy-from-chat-message",
  "query" : "update customer set email= email id where id  equal id",
  "description": "select all data in category table where id equal id"
},{
  "schedule_name" : "check:emails-errors",
  "query" : "insert into cron_job_report (signature, start_time) values (signature, date)",
  "description": "insert signature and start_time filed in cron_job_report table"
},{
  "schedule_name" : "check:emails-errors",
  "query" : "select * from supplier where email= email",
  "description": "select all data in supplier table where email equal email"
},{
  "schedule_name" : "check:emails-errors",
  "query" : "select * from agent where email= email",
  "description": "select all data in agent table where email equal email"
},{
  "schedule_name" : "check:landing-page",
  "query" : "select * from `landing_page_products` where timestamp(end_date) < NOW() or `status` = 0",
  "description": "select all data in landing_page_products table where timestamp(end_date) < NOW() or `status` = ?"
},{
  "schedule_name" : "check:landing-page-magento",
  "query" : "select * from `landing_page_products` where timestamp(end_date) < NOW() or `status` = 0",
  "description": "select all data in landing_page_products table where timestamp(end_date) < NOW() or `status` = ?"
},{
  "schedule_name" : "check:landing-page-magento",
  "query" : "select * from product where id = id",
  "description": "select all data in product table where id equal id"
},{
  "schedule_name" : "check:landing-page-magento",
  "query" : "select * from store_website where id = id",
  "description": "select all data in store_website table where id equal id"
},{
  "schedule_name" : "check:user-logins",
  "query" : "insert into cron_job_report (signature, start_time) values (signature, date)",
  "description": "insert signature and start_time filed in cron_job_report table"
},{
  "schedule_name" : "check:user-logins",
  "query" : "select * from user",
  "description": "select all data in user table"
},{
  "schedule_name" : "check:user-logins",
  "query" : "select * from `user_logins` where `user_id` = ? and `created_at` > ? order by `created_at` desc",
  "description": "select all data in user_logins table where user_id equal user id and created_at greater than today date order by created_at desc"
},{
  "schedule_name" : "check:user-logins",
  "query" : "insert into `user_logins` (user_id) values (user_id)",
  "description": "insert the user_id in user_logins table "
},{
  "schedule_name" : "check:user-logins",
  "query" : "insert into `user_logins` (user_id, login_at) values (user_id, login_at)",
  "description": "insert the user_id and login_at and  in user_logins table "
},{
  "schedule_name" : "check:user-logins",
  "query" : "update `cron_job_report` set `end_time` = time where id=id",
  "description": "update end_time field in cron_job_report table where id equal id"
},{
  "schedule_name" : "check:messages-errors",
  "query" : "insert into cron_job_report (signature, start_time) values (signature, date)",
  "description": "insert signature and start_time filed in cron_job_report table"
},{
  "schedule_name" : "check:messages-errors",
  "query" : "select * from `chat_messages` where `number` is null and `approved` = 1 and `status` = 2 and `sent` = ? and `created_at` between ? and ? and (`error_status` = 0 or `error_status` = 1)",
  "description": "select all data in chat_messages where number in null and approved equal 1 and status equal 2 and created_at between ? and ? and (error_status = 0 or error_status = 1)"
},{
  "schedule_name" : "check:messages-errors",
  "query" : "select * from `customer` where id = customer_id)",
  "description": "select all data in customer table where id equal customer id"
},{
  "schedule_name" : "check:messages-errors",
  "query" : "update customer set is_error_flagged= 1 where id = customer_id",
  "description": "update is_error_flagged field in customer table where id equal customer_id"
},{
  "schedule_name" : "check:messages-errors",
  "query" : "update chat_message set error_status= 0, created_at = current date where id = id",
  "description": "update error_status and created_at field in chat_message table where id equal id"
},{
  "schedule_name" : "check:messages-errors",
  "query" : "update `cron_job_report` set `end_time` = time where id=id",
  "description": "update end_time field in cron_job_report table where id equal id"
},{
  "schedule_name" : "check:scraper-killed-history",
  "query" : "insert into cron_job_report (signature, start_time) values (signature, date)",
  "description": "insert signature and start_time filed in cron_job_report table"
},{
  "schedule_name" : "check:scraper-killed-history",
  "query" : "select * from scraper where scraper_name equal scraper_name",
  "description": "insert signature and start_time filed in cron_job_report table"
},{
  "schedule_name" : "check:scraper-killed-history",
  "query" : "insert into scraper_killed_history (scraper_id,scraper_name, comment) values (scraper_id,scraper_name, 'Scraper killed')",
  "description": "insert scraper_id,scraper_name and commend filed in scraper_killed_history table"
},{
  "schedule_name" : "check:scraper-killed-history",
  "query" : "update `cron_job_report` set `end_time` = time where id=id",
  "description": "update end_time field in cron_job_report table where id equal id"
},{
  "schedule_name" : "check:scraper-running-status",
  "query" : "insert into cron_job_report (signature, start_time) values (signature, date)",
  "description": "insert signature and start_time filed in cron_job_report table"
},{
  "schedule_name" : "check:scraper-running-status",
  "query" : "insert into scraper_server_status_history (scraper_name,scraper_string,server_id,duration,total_memory,used_memory,in_percentage,pid) values(scraper_name,scraper_string,server_id,duration,total_memory,used_memory,in_percentage,pid) ",
  "description": "insert scraper_name,scraper_string,server_id,duration,total_memory,used_memory,in_percentage,pid filed in scraper_server_status_history table"
},{
  "schedule_name" : "CheckScrapersLog",
  "query" : "select * from scraper where scraper_name= scraper_name",
  "description": "select all data in scraper where scraper_name equal scraper_name "
},{
  "schedule_name" : "CheckScrapersLog",
  "query" : "select * from user where id= scraper_made_by",
  "description": "select all data in user where id equal scraper_made_by "
},{
  "schedule_name" : "CheckScrapersLog",
  "query" : "insert into scrap_remark (scraper_name, scrap_id, module_type, remark) values (scraper_name, 0, '', remark) ",
  "description": "insert the scraper_name, scrap_id, module_type and remark field in scrap_remark table"
},{
  "schedule_name" : "CheckScrapersLog",
  "query" : "select * from `whatsapp_configs` where `is_customer_support` != 1 and `status` = 1",
  "description": "select all data in  whatsapp_configs where is_customer_support != 1 and status = 1"
},{
  "schedule_name" : "cold-leads:classify-genders",
  "query" : "insert into cron_job_report (signature, start_time) values (signature, date)",
  "description": "insert signature and start_time filed in cron_job_report table"
},{
  "schedule_name" : "cold-leads:classify-genders",
  "query" : "select * from `cold_leads` where `is_gender_processed` = ? limit 10000",
  "description": "select all data in cold_leads where is_gender_processed =  0 limit 10000"
},{
  "schedule_name" : "cold-leads:classify-genders",
  "query" : "select * from `people_names` where INSTR('919927028533', `name`) > 0 or INSTR('A Shora', `name`) > 0 and `name` != ?",
  "description": "select all data in people_names where INSTR('919927028533', `name`) > 0 or INSTR('A Shora', `name`) > 0 and `name` != ?"
},{
  "schedule_name" : "cold-leads:classify-genders",
  "query" : "update `cron_job_report` set `end_time` = time where id=id",
  "description": "update end_time field in cron_job_report table where id equal id"
},{
  "schedule_name" : "ConnectGoogleClientAccounts",
  "query" : "select * from `google_client_account_mails` order by `created_at` desc",
  "description": "select all data in google_client_account_mails order by created_at desc"
},{
  "schedule_name" : "ConnectGoogleClientAccounts",
  "query" : "select * from `user`",
  "description": "select all data in user"
},{
  "schedule_name" : "ConnectGoogleClientAccounts",
  "query" : "select * from google_client_account where google_client_account_id = id",
  "description": "select all data in google_client_account where google_client_account_id = id"
},{
  "schedule_name" : "ConnectGoogleClientAccounts",
  "query" : "insert into google_client_account (google_client_id, receiver_id, message, notification_type) value (google_client_id, receiver_id, message, 'error')",
  "description": "insert the google_client_id, receiver_id, message and  notification_type field value in google_client_account"
},{
  "schedule_name" : "convertImage:toThumbnail",
  "query" : "select * from `media` inner join `mediables` on `mediables`.`media_id` = `media`.`id` where `is_processed` = 0 and `mediable_type` = ? and `aggregate_type` = ? order by `id` asc",
  "description": "select all data in media table join mediables on mediables.media_id = media.id where is_processed = 0 and mediable_type = ? and aggregate_type = ? order by id asc "
},{
  "schedule_name" : "convertImage:toThumbnail",
  "query" : "update media set is_processed = 1 where id = id",
  "description": "update is_processed field in media table where id = id "
},{
  "schedule_name" : "convertImage:toThumbnail",
  "query" : "update media set is_processed = 3 where id = id",
  "description": "update is_processed field in media table where id = id "
},{
  "schedule_name" : "convert-to-eur:cashflow",
  "query" : "select * from `cash_flows` where `amount_eur` <= 0 and `currency` != ''",
  "description": "select all data in cash_flows where amount_eur <= 0 and currency != ''"
},{
  "schedule_name" : "convert-to-eur:cashflow",
  "query" : "update cash_flows set amount_eur = amount where id = id",
  "description": "update amount_eur field in cash_flows table where id = id"
},{
  "schedule_name" : "facebook:import-customers",
  "query" : "insert into cron_job_report (signature, start_time) values (signature, date)",
  "description": "insert signature and start_time filed in cron_job_report table"
},{
  "schedule_name" : "facebook:import-customers",
  "query" : "select * from customer where facebook_id = facebook_id",
  "description": "select all data in customer table where facebook_id equal facebook_id"
},{
  "schedule_name" : "facebook:import-customers",
  "query" : "select * from customer where facebook_id = facebook_id",
  "description": "select all data in customer table where facebook_id equal facebook_id"
},{
  "schedule_name" : "facebook:import-customers",
  "query" : "insert into customer (name, facebook_id) values (name, facebook_id)",
  "description": "insert the name and facebook_id in customer table"
},{
  "schedule_name" : "facebook:import-customers",
  "query" : "insert into facebook_messages (customer_id, sender,receiver,is_sent_by_me,message) values (customer_id, sender,receiver,is_sent_by_me,message)",
  "description": "insert the customer_id, sender,receiver,is_sent_by_me and message in facebook_messages table"
},{
  "schedule_name" : "cold-lead:create-if-replied",
  "query" : "insert into cron_job_report (signature, start_time) values (signature, date)",
  "description": "insert signature and start_time filed in cron_job_report table"
},{
  "schedule_name" : "cold-lead:create-if-replied",
  "query" : "insert into cron_job_report (signature, start_time) values (signature, date)",
  "description": "insert signature and start_time filed in cron_job_report table"
},{
  "schedule_name" : "cold-lead:create-if-replied",
  "query" : "select * from `accounts` where `platform` = ? and `broadcast` = ? and `accounts`.`deleted_at` is null",
  "description": "select all data in accounts table where platform equal platform and broadcast equal ? and deleted_at is null"
},{
  "schedule_name" : "email:create-customers-if-new-email-comes",
  "query" : "insert into cron_job_report (signature, start_time) values (signature, date)",
  "description": "insert signature and start_time filed in cron_job_report table"
},{
  "schedule_name" : "email:create-customers-if-new-email-comes",
  "query" : "select * from customer where email = email",
  "description": "select first record in customer table where email equal email "
},{
  "schedule_name" : "email:create-customers-if-new-email-comes",
  "query" : "insert into customer (email,name) values (email,name)",
  "description": "insert email and name in customer table "
},{
  "schedule_name" : "email:create-customers-if-new-email-comes",
  "query" : "update `cron_job_report` set `end_time` = time where id=id",
  "description": "update end_time field in cron_job_report table where id equal id"
},{
  "schedule_name" : "create-erp-lead-from-cancellation-order",
  "query" : "select * from `orders` where `order_status_id` = 11 and `orders`.`deleted_at` is null",
  "description": "select all data in orders table where order_status_id equal 11 and deleted_at is null"
},{
  "schedule_name" : "create-erp-lead-from-cancellation-order",
  "query" : "select * from `brand` where `id` = id",
  "description": "select all data in brand table where id equal id "
},{
  "schedule_name" : "create-erp-lead-from-cancellation-order",
  "query" : "insert into Erp_leads ('lead_status_id','customer_id','store_website_id','product_id','brand_id','category_id','color','size','min_price','max_price','brand_segment','type') values ('lead_status_id','customer_id','store_website_id','product_id','brand_id','category_id','color','size','min_price','max_price','brand_segment','type')",
  "description": "insert the lead_status_id,customer_id,store_website_id,product_id,brand_id,category_id,color,size,min_price,max_price,brand_segment and type in field in Erp_leads table"
},{
  "schedule_name" : "create:lidia-products",
  "query" : "insert into cron_job_report (signature, start_time) values (signature, date)",
  "description": "insert signature and start_time filed in cron_job_report table"
},{
  "schedule_name" : "create:lidia-products",
  "query" : "update `cron_job_report` set `end_time` = time where id=id",
  "description": "update end_time field in cron_job_report table where id equal id"
},{
  "schedule_name" : "create-mailinglist-influencers",
  "query" : "select * from `scrap_influencers` where (`read_status` != 1 or `read_status` is null) and `email` != ? limit 1",
  "description": "select all data scrap_influencers table where read_status != ? or read_status is null) and email != ? limit 1"
},{
  "schedule_name" : "create-mailinglist-influencers",
  "query" : "select * from `service`",
  "description": "select all data service table"
},{
  "schedule_name" : "create-mailinglist-influencers",
  "query" : "select `id`, `title`, `mailing_service_id`, `send_in_blue_api`, `send_in_blue_account` from `store_websites` where `website_source` = ? and `mailing_service_id` is not null and `mailing_service_id` > 0 and `id` = ? and `store_websites`.`deleted_at` is null order by `id` desc",
  "description": "select id,title,mailing_service_id,send_in_blue_api,send_in_blue_account data in store_websites table where `website_source` = ? and `mailing_service_id` is not null and mailing_service_id > 0 and id = ? and deleted_at is null order by id desc"
},{
  "schedule_name" : "users:previous-payment",
  "query" : "select * from hubstaff_activity orderBy starts_at",
  "description": "select first record in hubstaff_activity table orderBy starts_at"
},{
  "schedule_name" : "users:previous-payment",
  "query" : "select `hubstaff_activities`.*, `hubstaff_members`.`user_id` as `hm_user_id` from `hubstaff_activities` left join `hubstaff_members` on `hubstaff_members`.`hubstaff_user_id` = `hubstaff_activities`.`user_id` where `hubstaff_activities`.`status` = ? and `hubstaff_activities`.`paid` = ? order by `created_at` desc",
  "description": ""
},{
  "schedule_name" : "users:previous-payment",
  "query" : "select * from `user_rates` where `start_date` < start_date and `user_id` = user_id order by `start_date` desc",
  "description": "select all data in user_rates where start_date < ? and user_id = ? order by start_date desc"
},{
  "schedule_name" : "users:previous-payment",
  "query" : "select * from `payment_receipt` where `user_id` = user_id order by `start_date` date desc",
  "description": "select all data in payment_receipt where user_id = user_id order by start_date date desc"
},{
  "schedule_name" : "users:previous-payment",
  "query" : "update hubstaff_activities  set (paid) values (1) where id = id",
  "description": "update paid field in hubstaff_activities where id equal id"
},{
  "schedule_name" : "users:previous-payment",
  "query" : "insert into payment_receipt (worked_minutes,status,rate_estimated,date,user_id,billing_start_date,billing_end_date,currency) values (worked_minutes,'Pending',rate_estimated,date,user_id,billing_start_date,billing_end_date,'')",
  "description": "insert the worked_minutes,status,rate_estimated,date,user_id,billing_start_date,billing_end_date and currency field value in payment_receipt table"
},{
  "schedule_name" : "create:scraped-products",
  "query" : "insert into cron_job_report (signature, start_time) values (signature, date)",
  "description": "insert signature and start_time filed in cron_job_report table"
},{
  "schedule_name" : "create:scraped-products",
  "query" : "select * from `scraped_products` where `has_sku` = 1 and `website` = 'G&B'",
  "description": "select all data in scraped_products table where has_sku equal 1 and website equal 'G&B'"
},{
  "schedule_name" : "create:scraped-products",
  "query" : "select * from `products` where `sku` = ? and `products`.`deleted_at` is null",
  "description": "select all data in products page  where sku = ? and deleted_at is null "
},{
  "schedule_name" : "create:scraped-products",
  "query" : "select * from `brand` where id = brand_id",
  "description": "select all data in brand page  where id equal brand_id "
},{
  "schedule_name" : "create:scraped-products",
  "query" : "update products where set sku= sku, brand = brand, supplier = 'G & B Negozionline', name = name, short_description= short_description, supplier_link=supplier_link, stage = 3 ,price = price,price_inr = price_inr, price_special= price_special, price_special= price_special where id = id ",
  "description": "update the sku,brand,supplier,name,short_description supplier_link field in products table "
},{
  "schedule_name" : "create:scraped-products",
  "query" : "insert into product (sku,brand,supplier,name,short_description,supplier_link,stage) values (sku,brand,'G & B Negozionline',name,short_description,supplier_link,3)",
  "description": "insert the sku,brand,supplier,name,short_description,supplier_link and stage field value in product table"
},{
  "schedule_name" : "create:scraped-products",
  "query" : "update `cron_job_report` set `end_time` = time where id=id",
  "description": "update end_time field in cron_job_report table where id equal id"
},{
  "schedule_name" : "create:scraped-products",
  "query" : "select * from `brand` where id = brand_id",
  "description": "select all data in brand page  where id equal brand_id "
},{
  "schedule_name" : "scraper:not-running",
  "query" : "insert into cron_job_report (signature, start_time) values (signature, date)",
  "description": "insert signature and start_time filed in cron_job_report table"
},{
  "schedule_name" : "scraper:not-running",
  "query" : " SELECT  s.id, s.supplier, sp.scraper_name,  MAX(ls.last_inventory_at) AS last_update,     sp.scraper_name,     sp.inventory_lifetime FROM     suppliers s JOIN     scrapers sp on sp.supplier_id = s.id LEFT JOIN     scraped_products ls ON     ls.website=sp.scraper_name WHERE     s.supplier_status_id=1 GROUP BY     s.id HAVING     last_update < DATE_SUB(NOW(), INTERVAL sp.inventory_lifetime DAY) OR     last_update IS NULL ORDER BY     s.supplier",
  "description": ""
},{
  "schedule_name" : "customer:chat-message-quick-data",
  "query" : "select * from `customers` where `customers`.`deleted_at` is null",
  "description": "select all data in customers where deleted_at is null"
},{
  "schedule_name" : "customer:chat-message-quick-data",
  "query" : "insert into chat_messages_quick_datas (model,model_id) values (model,model_id)",
  "description": "insert the model and model_id in chat_messages_quick_datas table"
},{
  "schedule_name" : "customer:dob-and-anniversary-mail",
  "query" : "select * from `customers` where day(`dob`) = ? and month(`dob`) = ? and `customers`.`deleted_at` is null",
  "description": "select all data in customers table where day(`dob`) = ? and month(`dob`) = ? and deleted_at is null"
},{
  "schedule_name" : "customer:dob-and-anniversary-mail",
  "query" : "select * from `mailinglist_templates` where `category_id` = ? and `store_website_id` = ?",
  "description": "select all data in mailinglist_templates table where category_id equal  category_id and store_website_id equal store_website_id "
},{
  "schedule_name" : "customer:dob-and-anniversary-mail",
  "query" : "select * from `email_address` where `category_id` = ?",
  "description": "select all data in email_address table where category_id equal  category_id"
},{
  "schedule_name" : "customer:dob-and-anniversary-mail",
  "query" : "select * from `mailinglist_templates` where `category_id` = ? ",
  "description": "select all data in mailinglist_templates table where category_id equal  category_id"
},{
  "schedule_name" : "customer:dob-and-anniversary-mail",
  "query" : "select * from `email_address`",
  "description": "select all data in email_address table"
},{
  "schedule_name" : "customer:dob-and-anniversary-mail",
  "query" : "insert into (model_id,model_type,from,to,subject,message,template,additional_data,status,is_draft) values (model_id,model_type,from,to,subject,message,'birthday-mail',additional_data,'pre-send',1)",
  "description": "select all data in email_address table"
},{
  "schedule_name" : "customer:dob-and-anniversary-mail",
  "query" : "select * from `customers` where day(`wedding_anniversery`) = ? and month(`wedding_anniversery`) = ? and `customers`.`deleted_at` is null",
  "description": "select all data in customers table where day(`wedding_anniversery`) = ? and month(`wedding_anniversery`) = ? and deleted_at is null"
},{
  "schedule_name" : "customer:dob-and-anniversary-mail",
  "query" : "select * from `mailinglist_template_categories` where `title` = 'Wedding Anniversary",
  "description": "select all data in mailinglist_template_categories table where title equal Wedding Anniversary"
},{
  "schedule_name" : "emaillead:import-customers",
  "query" : "select * from `customer` ",
  "description": "select all data in customer table"
},{
  "schedule_name" : "emaillead:import-customers",
  "query" : "select * from `email_lead` where email= email",
  "description": "select all data in email_lead where email equal email"
},
  {
    "schedule_name" : "orders:merge-coupons",
    "query" : "SELECT * from store_websites",
    "description": "select all data from store_websites table"
  },
  {
    "schedule_name" : "orders:merge-coupons",
    "query" : "SELECT * from coupons where code = '$obj->coupon_code'",
    "deceription" : "select all data from coupons table where code = 'coupon code from object"
  },
  {
    "schedule_name" : "orders:merge-coupons",
    "query" : "SELECT * from orders where order_id = '$item->order_id'",
    "deceription" : "select all data from order table where order_id = 'order_id from item object"
  },
  {
    "schedule_name" : "tasks:overdue_tasks",
    "query" : "SELECT * from tasks where is_completed is null where due_date < '$now'",
    "deceription" : "select all data from tasks table where is_completed = null and due_date is less than current date"
  },
  {
    "schedule_name" : "tasks:overdue_tasks",
    "query" : "SELECT * from users where task = 'assign_to'",
    "deceription" : "select all data from users table whoever is assign to this task"
  },
  {
    "schedule_name" : "parse:log",
    "query" : "SELECT * from laravel_logs where log = 'value'",
    "deceription" : "Get log from laravel log table"
  },
  {
    "schedule_name" : "Post Charities Order Amount To Cashflow",
    "query" : "select order_products.*, customer_charities.id as charity_id  from order_products inner join customer_charities on customer_charities.product_id = order_products.product_id inner join orders on orders.id = order_products.order_id where date(orders.order_date) between date('2023-03-20') and date('2023-03-27')",
    "deceription" : "select * from order_products, select id from customer_charities as charity_id from order_products inner join customer_charities on customer_charities of product_if is_equal to product_id of order_productsinner join order on order_id = order_id of order_products where date between ('2023-03-20') and ('2023-03-27')"
  },
  {
    "schedule_name" : "Post Charities Order Amount To Cashflow",
    "query" : "select first data from cashflow where cash_flow_able_id = 'charity_id'",
    "deceription" : "select first data from cashflow where cash_flow_able_id is_equal to charity_id"
  },
  {
    "schedule_name" : "Post Charities Order Amount To Cashflow",
    "query" : "select * from order where id = order_id",
    "deceription" : "select all data from order where its id is_equal order_id"
  },
  {
    "schedule_name" : "post:scheduled-media",
    "query" : "select * from schedule_group where status = '1' where scheduled_for = ''date('Y-m-d H-i-00')",
    "deceription" : "select all data from schedule_group where status is_equal 1 abd scheduled_for is_euql to some date"
  },
  {
    "schedule_name" : "pricedrop:check",
    "query" : "select pr.price as prod_real_price, pr.sku as prod_sku, pr.name as prod_name, tickets.* from tickets inner join products as pr on pr.sku = tickets.sku where tickets.deleted_at is null",
    "deceription" : "select price from pr as prod_real_price, sku from pr as prod_sku, name from pr as prod_name, * from rickets inner join products as pr on sku from pr is_equl sku from tickets where deleted_at from tickets is null"
  },
  {
    "schedule_name" : "productActivityStore",
    "query" : "select status_id, COUNT(id) as total from products where stock >= ? group by status_id",
    "deceription" : "select status_id and count id as total from products where stock is grater than euql to '1' and group by status_id"
  },
  {
    "schedule_name" : "productActivityStore",
    "query" : "insert into productactivities (status_id, value, created_at) values (3, 9, CURRENT_TIMESTAMP)",
    "deceription" : "insert data in to productactivities statusId = 3, value = 9 and create_at = CURRENT_TIMESTAMP"
  },
  {
    "schedule_name" : "product-move:brand",
    "query" : "select * from products where ('updated_at', '>=', '2021-01-18 00:00:00') where ('last_brand', '>', 0)",
    "deceription" : "select all data from products where updated_at is grater than equal to '2021-01-18', where 'last_brand is grater than 0'"
  },
  {
    "schedule_name" : "product:supplier",
    "query" : "select * from products",
    "deceription" : "select all data from products"
  },
  {
    "schedule_name" : "product:supplier",
    "query" : "select * from ProductSupplier",
    "deceription" : "select all data from ProductSupplier"
  },
  {
    "schedule_name" : "product:supplier",
    "query" : "select * from Supplier",
    "deceription" : "select all data from Supplier"
  },
  {
    "schedule_name" : "project_directory:manager",
    "query" : "select from ProjectFileManager where name = 'directoryStr'",
    "deceription" : "select data from ProjectFileManager where name is_equal to 'directoryStr'"
  },
  {
    "schedule_name" : "project_directory:manager",
    "query" : "insert into ProjectFileManager (name, project_name, size, parent) values ('$directoryStr', 'erp', '$size', '$parent')",
    "deceription" : "insert into projectFileManager name = '$directoryStr', project_name = erp, size = '$size', parent = '$parent'"
  },
  {
    "schedule_name" : "project:filemanagementdate",
    "query" : "select * from ProjectFileManager",
    "deceription" : "select all data from ProjectFileManager"
  },
  {
    "schedule_name" : "project:filemanagementdate",
    "query" : "select * from User",
    "deceription" : "select all data from User"
  },
  {
    "schedule_name" : "project:filemanagementdate",
    "query" : "select 'project_file_manager from Setting",
    "deceription" : "select 'project_file_manager' from Setting"
  },
  {
    "schedule_name" : "project:filemanagementdate",
    "query" : "insert into ProjectFileManager (project_id, name, old_size, new_size) values ('$id', '$name', '$old_size.MB', '$new_size.MB')",
    "deceription" : "insert into projectFileManager project_id = '$id', name = '$name', old_size = '$old_size', new_size = '$new_size'"
  },
  {
    "schedule_name" : "push-to-magento:brand",
    "query" : "select b.* from products inner join brands as b on b.id = products.brand where products.deleted_at is null group by b.id limit 0",
    "deceription" : "select all from products inner join brands as b on id from b.id = brand from product where product.deleted_at is null group by b.id limit to 0"
  },
  {
    "schedule_name" : "project:filemanagementdate",
    "query" : "select * from storeWebsites where id in '$weblimit where api_token is not equal to '' where website_source is_equal to 'magento",
    "deceription" : "select all data from storewebsites where id is in array of $weblimit, where api_token is not equal to '', where website_source is_equal to 'magento'"
  },
  {
    "schedule_name" : "project:filemanagementdate",
    "query" : "select from storeWebsitebrands where brand_id $brand_id, where store_website_id is '$store_website_id'",
    "deceription" : "select all data from storewebsitebrand where brand_id is $brand_id where store_website_id is euql to '$store_website_id'"
  },
  {
    "schedule_name" : "colors:push-to-mangento",
    "query" : "select * from storeWebsites where api_token is not equal to '' where website_source is_equal to 'magento",
    "deceription" : "select all data from storewebsites where api_token is not equal to '', where website_source is_equal to 'magento'"
  },
  {
    "schedule_name" : "colors:push-to-mangento",
    "query" : "select * from ColorNamesReference group_by 'erp_name'",
    "deceription" : "select all data from colorNameRefrence and group_by to erp_name"
  },
  {
    "schedule_name" : "colors:push-to-mangento",
    "query" : "select * from store_website_colors where erp_color = ? and store_website_id = ? and platform_id > ?",
    "deceription" : "select all data from store_website_colors wher erp_color = '' and store_website_id = '' and platform_id is graterthan ''"
  },
  {
    "schedule_name" : "size:push-to-mangento",
    "query" : "select * from storeWebsites where api_token is not equal to '' where website_source is_equal to 'magento",
    "deceription" : "select all data from storewebsites where api_token is not equal to '', where website_source is_equal to 'magento'"
  },
  {
    "schedule_name" : "size:push-to-mangento",
    "query" : "select from store_websites where size_id = '$s->id' and store_website_id = '$web->id' and platform_id > 0",
    "deceription" : "select data from store_website where size_id = '$s->id wher store_website_id is equal to '$web->id' and platform_id is grater than 0"
  },
  {
    "schedule_name" : "size:push-to-mangento",
    "query" : "insert into store_website (size_id, store_website_id, platform_id) values ('$->id', '$web->id', '$id')",
    "deceription" : "insert into store_website table size_id isequal to $s->id, store_website_id isequal to $web->id, platform_id is equal to $id"
  },
  {
    "schedule_name" : "push-to-magento:category",
    "query" : "select * from categories where id in (?, ?) order by parent_id asc",
    "deceription" : "select all data from categories where id in [] order by parent_id asc"
  },
  {
    "schedule_name" : "push-to-magento:category",
    "query" : "select * from store_websites where id in '$limit' and api_token != null and website_source is_equal magento",
    "deceription" : "select all data from store_websites where id in '$limit' where api_token != null and website_source is_equal to magento"
  },
  {
    "schedule_name" : "push-to-magento:category",
    "query" : "select * from store_websites where api_token != null and website_source is_equal magento",
    "deceription" : "select all data from store_websites where api_token != null and website_source is_equal to magento"
  },
  {
    "schedule_name" : "resource:image",
    "query" : "select * from resource_category where parent_id = 0 and title = '$title'",
    "deceription" : "select all data from resource_category where parent_id is_equal to 0 and title is_equal to '$title'"
  },
  {
    "schedule_name" : "resource:image",
    "query" : "select * from resource_category where parent_id != 0 and title = '$title'",
    "deceription" : "select all data from resource_category where parent_id is_not_equal to 0 and title is_equal to '$title'"
  },
  {
    "schedule_name" : "resource:image",
    "query" : "insert into resource_image (cat_id, sub_cat_id, images, url, description, created_by, is_pending) values ('$categoryId', '$subCategoryId', '$images', '$url', '$description', 'email-receiver', '1')",
    "deceription" : "insert into resource_image (cat_id, sub_cat_id, images, url, description, created_by, is_pending) values ('$categoryId', '$subCategoryId', '$images', '$url', '$description', 'email-receiver', '1')"
  },
  {
    "schedule_name" : "reconsile:brand",
    "query" : "select * from store_website where website_store = magento",
    "deceription" : "select all data from store_website where website_store is_equal to magento"
  },
  {
    "schedule_name" : "recreate:products-scraped",
    "query" : "select * from screped_products where website = angelominetti",
    "deceription" : "select all data from screped_products where website is_equal to angelominetti"
  },
  {
    "schedule_name" : "sizes:refine",
    "query" : "Select from product where size != '' and is_crop_ordered = 1  and is_approved = 0",
    "deceription" : "select from product where size is_not_equal null and is_crop_ordered is_equal 1 and is_approved is 0"
  },
  {
    "schedule_name" : "currencies:refresh",
    "query" : "update currencies SET code = '$symbol', rate = '$rate'",
    "deceription" : "Update currencies table and set code is_equal to '$symbol' and rate is_equal '$rate'"
  },
  {
    "schedule_name" : "hubstaff:refresh_users",
    "query" : "select from hubstaff_member where hubstaff_user_id = '$member->user_id'",
    "deceription" : "select data from hubstaff_member where hubstaff_user_id is_equal to '$member->user_id'"
  },
  {
    "schedule_name" : "hubstaff:refresh_users",
    "query" : "insert into hustaff_member (hubstaff_user_id, email, user_id) values ('$member->user_id', '$member->email', '($userExist) ? $userExist->id : null')",
    "deceription" : "insert ntp hubstaff_member hubstaff_user_id = '$member->user_id', email = '$member->email', user_id = '($userExist) ? $userExist->id : null'"
  },
  {
    "schedule_name" : "timedoctor:refresh_projects {id}",
    "query" : "Select First from time_doctor where time_doctor_project_id = '$project->id'",
    "deceription" : "Select first data from time_doctor where time_doctor_project_id is_equal to perticular project id"
  },
  {
    "schedule_name" : "timedoctor:refresh_projects {id}",
    "query" : "Insert into time_doctor (time_doctor_project_id,time_doctor_account_id, time_doctor_account_id, time_doctor_project_name, time_doctor_project_description) values ('$project->id','$this->TIME_DOCTOR_USER_ID', '$this->TIME_DOCTOR_COMPANY_ID', '$project->name', '(isset( $project->description ) &&  $project->description != '') ? $project->description : ''')",
    "deceription" : "insert all data into time_doctor table"
  },
  {
    "schedule_name" : "timedoctor:refresh_tasks {id}",
    "query" : "select * from time_doctor_task where id = id",
    "deceription" : "find all data from timedoctor based on id"
  },
  {
    "schedule_name" : "timedoctor:refresh_tasks {id}",
    "query" : "Insert into time_doctor_task (time_doctor_task_id,project_id, time_doctor_project_id, time_doctor_company_id, summery, description, time_doctor_account_id) values (time_doctor_task_id,project_id, time_doctor_project_id, time_doctor_company_id, summery, description, time_doctor_account_id)",
    "deceription" : "insert all data into time_doctor_task table"
  },
  {
    "schedule_name" : "timedoctor:refresh_users {id}",
    "query" : "select * from time_doctor_account where id = id",
    "deceription" : "find all data from time_doctor_acount based on id"
  },
  {
    "schedule_name" : "timedoctor:refresh_users {id}",
    "query" : "Insert into time_doctor_member (time_doctor_user_id,email, time_doctor_account_id, user_id) values (time_doctor_user_id,email, time_doctor_account_id, user_id)",
    "deceription" : "insert all data into time_doctor_member table"
  },
  {
    "schedule_name" : "RejectDuplicateImages {media_id} {product_id}",
    "query" : "Select * from products where id = product_id",
    "deceription" : "select all data from product based on id"
  },
  {
    "schedule_name" : "RejectDuplicateImages {media_id} {product_id}",
    "query" : "insert into status_helper (status_id, is_crop_rejected, crop_remark, crop_rejected_by, is_approved, is_crop_approved, is_crop_ordered, is_crop_being_verified, crop_rejected_at) valuse (status_id, is_crop_rejected, crop_remark, crop_rejected_by, is_approved, is_crop_approved, is_crop_ordered, is_crop_being_verified, crop_rejected_at)",
    "deceription" : "Add all data into status_helper table"
  },
  {
    "schedule_name" : "RejectDuplicateImages {media_id} {product_id}",
    "query" : "insert into listing_history (user_id, product_id, content, action) (user_id, product_id, content, action)",
    "deceription" : "Add all data into listing_history table"
  },
  {
    "schedule_name" : "remove-product-images:no-path",
    "query" : "select * from products where is_barcode_check = 1",
    "deceription" : "Select all data from product based on barcode_check"
  },
  {
    "schedule_name" : "ScrapperImage:REMOVE",
    "query" : "select * from scraper_image where created_at < now date()",
    "deceription" : "Select all data from scraper_images based on created_at date"
  },
  {
    "schedule_name" : "image:jpegtojpg",
    "query" : "select * from media where extension = jpeg",
    "deceription" : "select all data from media based on extension"
  },
  {
    "schedule_name" : "image:jpegtojpg",
    "query" : "update media set extension = jpg",
    "deceription" : "update extension of particualr image"
  },
  {
    "schedule_name" : "product:replace-text",
    "query" : "select products.*, product_status.name, product_status.value from products left join product_status on products.id = product_status.product_id and product_status.name = ? where products.deleted_at is null order by products.id desc",
    "deceription" : "select * from products, name from product_status, value from product_status left join product_status on product.id equal product_id of product_status and name of product_status = ? where  product deleted_at is null orderby id from products desc"
  },
  {
    "schedule_name" : "reset:daily-planner",
    "query" : "select * from users where id in ['$users_array']",
    "deceription" : "select all data of users whos id is in '$users_array'"
  },
  {
    "schedule_name" : "restore:cropped-images",
    "query" : "select * from products where is_image_processed = 1",
    "deceription" : "select all data from products where is_image_processed is 1"
  },
  {
    "schedule_name" : "restore:cropped-images",
    "query" : "update products sed is_image_processed = 0",
    "deceription" : "update products table set is_image_processed to 0"
  },
  {
    "schedule_name" : "product:restore-if-corrected",
    "query" : "select * from products where name != null and short_description != null and composition != null, is_listing_rejected_automatically = 1",
    "deceription" : "select all data from products based on name, short_description , composition and is_listing_rejected_automatically"
  },
  {
    "schedule_name" : "product:restore-if-corrected",
    "query" : "update products set is_listing_rejected_automatically = 0 and is_listing_rejected = 0",
    "deceription" : "update products table for is_listing_rejected and is_listing_rejected_automatically and set both to 0"
  },
  {
    "schedule_name" : "routes:sync",
    "query" : "select * from routes where uri = $route->uri",
    "deceription" : "select all data from routes based on route uri"
  },
  {
    "schedule_name" : "erpevents:run",
    "query" : "select * from erp_events where next_run_date >= '$startDate' and next_run_date <= '$endDate'",
    "deceription" : "select all data from erp_events based on next_run_date conditions "
  },
  {
    "schedule_name" : "erpevents:run",
    "query" : "select * from products where stock > 0 and suplier = in_stock",
    "deceription" : "select all data from products based on stock and suplier"
  },
  {
    "schedule_name" : "erpevents:run",
    "query" : "select * from products where stock > 0 and suplier = in_stock",
    "deceription" : "select all data from products based on stock and suplier"
  },
  {
    "schedule_name" : "erpevents:run",
    "query" : "select * from erp_leads where brand_id in $brandIds",
    "deceription" : "select all data from erp_lead where brand_id in brandIds array"
  },
  {
    "schedule_name" : "erpevents:run",
    "query" : "select * from product where brand in $brandIds",
    "deceription" : "select all data from product where brand in brandIds array"
  },
  {
    "schedule_name" : "erpevents:run",
    "query" : "select * from products inner join categories as c on c.title = products.category where (stock > ? or supplier = ?) and c.id in (?) and products.deleted_at is null",
    "deceription" : "select all data from products iner join to categories on title and product category and get only product which are not deleted"
  },
  {
    "schedule_name" : "erpevents:run",
    "query" : "select * from product where created_at > '$event->start_date'",
    "deceription" : "select all data from product based on created_at date"
  },
  {
    "schedule_name" : "erpevents:run",
    "query" : "select * from product where created_at <= '$event->start_date'",
    "deceription" : "select all data from product based on created_at date"
  },
  {
    "schedule_name" : "erpleads:run'",
    "query" : "select erp_leads.*, c.lead_product_freq from erp_leads inner join customers as c on c.id = erp_leads.customer_id where is_blocked_lead = ? and c.do_not_disturb = ?",
    "deceription" : ""
  },
  {
    "schedule_name" : "erpleads:run'",
    "query" : "select * from products inner join brands as b on b.id = products.brand inner join categories as c on c.id = products.category where (stock > ? or supplier = ?) and products.created_at > ? and products.name != ? and products.sku != ? and products.price != ? and products.deleted_at is null",
    "deceription" : ""
  },
  {
    "schedule_name" : "erpleads:run'",
    "query" : "select * from erp_lead_category where erp_lead_id = '$lead->id' and category_id != ''",
    "deceription" : "select all data from erp_lead_category based on erp_lead_id and category_id"
  },
  {
    "schedule_name" : "erpleads:run'",
    "query" : "select * from erp_lead_brand where erp_lead_id = '$lead->id' and brand_id != ''",
    "deceription" : "select all data from erp_lead_brand based on erp_lead_id and brand_id"
  },
  {
    "schedule_name" : "erpleads:run'",
    "query" : "select * from erp_lead_sending_history where customer_id = '$lead->customer_id' and product_id = '?' and lead_id = '$lead->id'",
    "deceription" : "select all data from erp_lead_seding_history based on customer_id, product_id and lead_id"
  },
  {
    "schedule_name" : "erpleads:run'",
    "query" : "inser into erp_lead_sending_history (product_id, customer_id, lead_id) values ((product_id, customer_id, lead_id))",
    "deceription" : "insert product_id, customer_id and lead_id into erp_lead_sending_history"
  },
  {
    "schedule_name" : "erpleads:run'",
    "query" : "insert into suggested_products (brands, categories,customer_id, total , platform, platform_id) values (brands, categories,customer_id, total , platform, platform_id)",
    "deceription" : "insert data into suggested_products table"
  },
  {
    "schedule_name" : "erpleads:run'",
    "query" : "insert into suggested_product_list (suggested_products_id ,customer_id, total , product_id, date) values (suggested_products_id ,customer_id, total , product_id, date)",
    "deceription" : "insert data into suggested_productlist table"
  },
  {
    "schedule_name" : "run:message-queues",
    "query" : "select group_id from message_queues group by groupId",
    "deceription" : "select group id from message_queues table"
  },
  {
    "schedule_name" : "run:message-queues",
    "query" : "select * from message_queues where sending_time < Carbon::now and sent = 0 and status != 1 and sending_time asc",
    "deceription" : "select all data from message_queues based on sending_time, sent and status"
  },
  {
    "schedule_name" : "run:priority-keyword-search",
    "query" : "select * from hashtag where priority = 1 and platform_id = 3",
    "deceription" : "select all data from hashtag table based on priority and platform_id"
  },
  {
    "schedule_name" : "save:products-images",
    "query" : "select * from products where is_without_image = 1 and supplier not in ['MINETTI', 'Spinnaker 101']",
    "deceription" : "select all products data based on is_without_image and supplier"
  },
  {
    "schedule_name" : "save:products-images",
    "query" : "insert into product (attachMedia, is_without_image) values (attachMedia, is_without_image)",
    "deceription" : "insert attachMedia and is_without_image into product table"
  },
  {
    "schedule_name" : "save:zoom-meetings",
    "query" : "insert into zoom_meetings (zoomkey, zoomsecret, zoommeetingid, zoomuserid) values (zoomkey, zoomsecret, zoommeetingid, zoomuserid)",
    "deceription" : "insert data into zoom_meetings table"
  },
  {
    "schedule_name" : "schedule:list",
    "query" : "select first from cron_job where signature Like '%{$signature}%'",
    "deceription" : "select all data from message_queues based on sending_time, sent and status"
  },
  {
    "schedule_name" : "schedule:list",
    "query" : "insert into cron_job (signature, schedule, error_count) values (signature, schedule, error_count)",
    "deceription" : "insert data into cron_job table"
  },
  {
    "schedule_name" : "ScrapApi:LogCommand",
    "query" : "delete from scraper_api_log where created_at < now()->subDays(7)",
    "deceription" : "delete log that are old for more than 7 days from scraper_api_log"
  },
  {
    "schedule_name" : "ScrapApi:LogCommand",
    "query" : "select scrapers., (select count() from scrapers as laravel_reserved_0 where scrapers.id = laravel_reserved_0.parent_id) as children_scraper_count from scrapers inner join suppliers as s on s.id = scrapers.supplier_id where supplier_status_id = ? and scrapper in (?, ?) and parent_id is null",
    "deceription" : ""
  },
  {
    "schedule_name" : "Scraper",
    "query" : "select * from developer_task where scraper_id  = scraper_id orderBy created_at",
    "deceription" : "selet all data from developer_task based on scraper_id and order them by created_at"
  },
  {
    "schedule_name" : "Scraper",
    "query" : "select COUNT(*) as totalproduct, scrapers.id as scraper_id, scrapers.scraper_name as scraper_name from scraped_products inner join scrapers on scraped_products.website = scrapers.scraper_name where date(scraped_products.created_at)=date('2023-03-27') and  ( scraped_products.title is null or scraped_products.title ='' ) group by scrapers.scraper_name",
    "deceription" : ""
  },
  {
    "schedule_name" : "Scraper",
    "query" : "insert into chat_messages (message, erp_user, user_id, approved, status, developer_task_id) values (message, erp_user, user_id, approved, status, developer_task_id)",
    "deceription" : "insert data into chat_messages table"
  },
  {
    "schedule_name" : "scraper:not-completed-alert",
    "query" : "select * from scraper where last_completed_at is null or last_completed_at < date",
    "deceription" : "select data from scraper based on last_completed_at"
  },
  {
    "schedule_name" : "scraplogs:activity",
    "query" : "select id from scraper where scraper_name Like scraper_name",
    "deceription" : "select id from scraper table based on scraper_name"
  },
  {
    "schedule_name" : "scraplogs:activity",
    "query" : "select id as scraper_id from scraper_logs  where scraper_id = '$scrapers_info[0]->id'",
    "deceription" : "select id from scraper_log based on condition on id"
  },
  {
    "schedule_name" : "scraplogs:activity",
    "query" : "insert into scrap_logs (scraper_id, folder_name, file_name, log_messages, created_at, updated_at) values (scraper_id, folder_name, file_name, log_messages, created_at, updated_at)",
    "deceription" : "insert data nto scrap_logs table"
  },
  {
    "schedule_name" : "command:scrapper_not_run",
    "query" : "selet * from scraper_process where scraper_name != '' orderBy scraper_id groupBy scraper_id",
    "deceription" : "select all data from scraper_process and order and group them by scraper_id"
  },
  {
    "schedule_name" : "command:scrapper_not_run",
    "query" : "select name from users where id = '$hasAssignedIssue->assigned_to'",
    "deceription" : "selct name from user based on id"
  },
  {
    "schedule_name" : "scrappersImages",
    "query" : "insert into scraper_image (website_id, img_name, img_url, create_at, updated_at) values (website_id, img_name, img_url, create_at, updated_at)",
    "deceription" : "insert data into scraper images table"
  },
  {
    "schedule_name" : "scrappersImagesDelete",
    "query" : "select img_url from scraper-images where created_at <  Carbon::now()->subDays(2)->toDateTimeString()",
    "deceription" : "select imgurl from scraper_images based on created_at date"
  },
  {
    "schedule_name" : "send:activity-listings",
    "query" : "SELECT causer_id,subject_type,COUNT(*) AS total FROM (SELECT DISTINCT activities.subject_id,activities.subject_type,activities.causer_idFROM activitiesWHERE activities.description = 'create'AND activities.causer_id IN (70,73)AND activities.created_at BETWEEN ? AND ? AS SUBQUER GROUP BY subject_type,causer_id",
    "deceription" : ""
  },
  {
    "schedule_name" : "send:activity-listings",
    "query" : "SELECT subject_type,COUNT(*) AS total FROM(SELECT DISTINCT activities.subject_id,activities.subject_typeFROM activities WHERE activities.description = 'create'AND activities.causer_id IN (70,73)AND activities.created_at BETWEEN ? AND ?)AS SUBQUERY GROUP BY subject_type",
    "deceription" : ""
  },
  {
    "schedule_name" : "customers:send-auto-reply",
    "query" : "select * from chat_messages where id = message_id where user_id = 0 or user_id = null",
    "deceription" : "select all messages from chat_messages based on user_id"
  },
  {
    "schedule_name" : "customers:send-auto-reply",
    "query" : "insert into chat_messages (customer_id, message, user_id, status, approved) values (customer_id, message, user_id, status, approved)",
    "deceription" : "insert data into chat_messages table"
  },
  {
    "schedule_name" : "customers:send-auto-reply",
    "query" : "select MAX(id) as id, customer_id from chat_messages where message is not null and customer_id > ? and (status not in (?, ?, ?)) group by customer_id",
    "deceription" : "select max(id) as id and customer_id from chat_messages based on message, customer_id and status"
  },
  {
    "schedule_name" : "customers:send-auto-reply",
    "query" : "select * from brands where deleted_at = null",
    "deceription" : "select all brands that are not deleted"
  },
  {
    "schedule_name" : "customers:send-auto-reply",
    "query" : "select * from category where id = 2",
    "deceription" : "select all data from categories based on id"
  },
  {
    "schedule_name" : "customers:send-auto-reply",
    "query" : "select * from category where id = 3",
    "deceription" : "select all data from categories based on id"
  },
  {
    "schedule_name" : "send:daily-reports-learning",
    "query" : "select * from daily_activity where repeat_type not null and for_date = date and type = learning",
    "deceription" : "get all data from daily_activity based on repeat, for_date and type"
  },
  {
    "schedule_name" : "send:daily-reports-learning",
    "query" : "select * from learning",
    "deceription" : "select all data from learning "
  },
  {
    "schedule_name" : "send:daily-reports-learning",
    "query" : "insert into learning (created_at, learning_duedate) values (create_at, learning_duedate)",
    "deceription" : "duplicate and insert data into learnig "
  },
  {
    "schedule_name" : "send-daily-planner-notification",
    "query" : "select * from user where id = id",
    "deceription" : "select all data from users based on id"
  },
  {
    "schedule_name" : "send-daily-planner-notification",
    "query" : "select * from daily_activity where id = event->daily_activity_id",
    "deceription" : "select all data from daily_activity based on id"
  },
  {
    "schedule_name" : "send-daily-planner-notification",
    "query" : "insert into daily_activity_histories (daily_activities_id, title, description) values (daily_activities_id, title, description)",
    "deceription" : "insert data into daily_activity_histories table"
  },
  {
    "schedule_name" : "send-daily-planner-notification",
    "query" : "insert in to chat_message (user_id, message) values(user_id, message)",
    "deceription" : "insert data into chat_messages table"
  },
  {
    "schedule_name" : "send:daily-planner-report",
    "query" : "select * from tasks where time_slot != null and planned_at = todate and is_completed = null and assign_to is in []",
    "deceription" : "select all data from task based on time_slot, assign_to, planned_atand is_completed"
  },
  {
    "schedule_name" : "send:daily-planner-report",
    "query" : "select * from tasks where is_statutory = 1 and is_verified = null and assign is in [] groupBy assign_to",
    "deceription" : "select all data from tasks based on is_statutory and is_verified group_by assign_to"
  },
  {
    "schedule_name" : "send:daily-planner-report",
    "query" : "select * from daily_activities where for_date = now date and user_id is in [] group_by user_id and time_slot",
    "deceription" : "select all data from daily_activities based on for_date and user_id also group_by user_id and time_slot"
  },
  {
    "schedule_name" : "send:daily-reports",
    "query" : "select * from daily_activities where repeat_type != null and for_date = data and type = event",
    "deceription" : "select all data from daily_activities based on repeat_type and for_date"
  },
  {
    "schedule_name" : "send:daily-reports",
    "query" : "select * from daily_activity where id = id",
    "deceription" : "select all data from daily_activity based on id"
  },
  {
    "schedule_name" : "command:date_time_reminder",
    "query" : "select * from task_manager where message_type = date_time_reminder_message orderBy id",
    "deceription" : "select all data from task_manager based on message_type and orderby id"
  },
  {
    "schedule_name" : "command:date_time_reminder",
    "query" : "insert into chat_bot_reply (question, replied_chat_id, chat_id, reply_from) values (question, replied_chat_id, chat_id, reply_from)",
    "deceription" : "insert data into chat_bot_reply table"
  },
  {
    "schedule_name" : "command:date_time_reminder",
    "query" : "select *, TIMESTAMPDIFF(MINUTE, last_date_time_reminder, '2023-03-27 16:58:56') as diff_min from developer_tasks where status not in (?, ?) and assigned_to IN (SELECT id FROM users WHERE is_task_planned = 1) and status <> ? and estimate_time is null and estimate_minutes is null and developer_tasks.deleted_at is null",
    "deceription" : ""
  },
  {
    "schedule_name" : "send:delivery-details",
    "query" : "select * from private_views wher date LIKE '%tomorrow%'",
    "deceription" : "select all data from private_views based on date"
  },
  {
    "schedule_name" : "send:delivery-details",
    "query" : "selct * from users where role = 'delivery coordinator",
    "deceription" : "select all data from users based on role"
  },
  {
    "schedule_name" : "send:delivery-details",
    "query" : "select * from auto_reply where type = auto-reply and keyword = private-viewing-details",
    "deceription" : "select all data from auto_repl based on type and keyword"
  },
  {
    "schedule_name" : "send:delivery-details",
    "query" : "update chat_message set erp_user = '$coordinator->id', approved = 1, status = 2",
    "deceription" : "update some values in chat_message table"
  },
  {
    "schedule_name" : "newsletter:send",
    "query" : "select * from news_letter where sent_on = null and sent_at != ''",
    "deceription" : "select all data from news_letter based on sent_on and sent_at"
  },
  {
    "schedule_name" : "send-report:failed-jobs",
    "query" : "select * from failed_jobs where failed_at > '$beforeFiveMin'",
    "deceription" : "select all data from failed_jobs based on failed_at"
  },
  {
    "schedule_name" : "fcm:send",
    "query" : "select sw.push_web_key, sw.push_web_id, ft.token, push_fcm_notifications.* from push_fcm_notifications left join fcm_tokens as ft on ft.store_website_id = push_fcm_notifications.store_website_id left join store_websites as sw on sw.id = push_fcm_notifications.store_website_id where ft.token != ? and sw.push_web_key != ? and sw.push_web_id != ? and push_fcm_notifications.sent_at between ? and ?",
    "deceription" : ""
  },
  {
    "schedule_name" : "hubstaff:send_report",
    "query" : "select hubstaff_user_id, name from users inner join hubstaff_members on hubstaff_members.user_id = users.id",
    "deceription" : "select hubstaff_user_id, name from users join with hubstaff_member with user_id"
  },
  {
    "schedule_name" : "send:pending-tasks-reminders",
    "query" : "select * from tasks where is_completed = null and tasks.id IN (SELECT task_id FROM task_users WHERE user_id IN (6, 7, 49, 56) AND type LIKE '%User%')'",
    "deceription" : "select all data from tasks based on is_completed amd user_id"
  },
  {
    "schedule_name" : "send:pending-tasks-reminders",
    "query" : "select * from user where user_id = id",
    "deceription" : "select all data from users based on user_id"
  },
  {
    "schedule_name" : "fcm:send",
    "query" : "select sw.push_web_key, sw.push_web_id, ft.token, push_fcm_notifications.* from push_fcm_notifications left join fcm_tokens as ft on ft.store_website_id = push_fcm_notifications.store_website_id left join store_websites as sw on sw.id = push_fcm_notifications.store_website_id where ft.token != ? and sw.push_web_key != ? and sw.push_web_id != ? and push_fcm_notifications.sent_at between ? and ?",
    "deceription" : ""
  }
]
